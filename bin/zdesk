#!/bin/sh

## -------------------------------------------------------------------
##
## zdesk: Use the Terraform Enterprise API to perform operations in TFE
##
## -------------------------------------------------------------------
##
## Copyright (c) 2018 HashiCorp. All Rights Reserved.
##
## This file is provided to you under the Mozilla Public License
## Version 2.0 (the "License"); you may not use this file
## except in compliance with the License.  You may obtain
## a copy of the License at
##
##   https://www.mozilla.org/en-US/MPL/2.0/
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
## -------------------------------------------------------------------

##
## Utility function declarations
##

# Return (print) "$1\n$2\n." if $1 is not empty, "$2\n." if $1 is empty.
# These "lists" always have an end-of-list marker, ".", if they are not empty.
# This is to help track empty list values that would otherwise be \n
# special characters that will get stripped by command substitution.

# Remove specified files
cleanup () {
  if [ -n "$1" ]; then
    echo "$1" | while read f; do
      echodebug "cleaning up $f"
      rm "$f" 2>&3
      if [ 0 -ne $? ]; then
        echoerr "Error cleaning up $f"
        echoerr "$f"
      fi
    done
  else
    echodebug "No file to clean up"
  fi
}


# Replace quotes and newlines with escape characters to prepare the
# value for insertion into JSON.
escape_value () {
  printf '%s' "$1" | awk '
  {
    gsub(/"/,"\\\"")
    gsub(/\\n/,"\\\\n")
  }
  NR == 1 {
    value_line = $0
  }
  NR != 1 {
    value_line = value_line "\\n" $0
  }
  END {
    printf "%s", value_line
  }'
}

zdesk_api_call () {
  # $1: optional integer parameter for number of next-pages to retrieve
  # $1 or $2 to $#: arguments to provide to curl

  echodebug "zdesk_api_call args: $@"

	if ! [ "$1" -eq "$1" ] >/dev/null 2>&1; then
    npages="10000"
  else
    npages="$1"
    shift
	fi

  echodebug "npages: $npages"
  echodebug "curl args: $@"
 
  if [ "$npages" -lt 1 ]; then
    return 0
  fi

  case $curl_token_src in
    curlrc)
      echovvv "curl --header \"Content-Type: application/vnd.api+json\"" >&2
      echovvv "     --config \"$curlrc\"" >&2
      echovvv "     $*" >&2

      resp="$(curl $curl_silent -w '\nhttp_code: %{http_code}\n' \
                   --header "Content-Type: application/vnd.api+json" \
                   --config "$curlrc" \
                   $@)"
      ;;
    token)
      echovvv "curl --header \"Content-Type: application/vnd.api+json\"" >&2
      echovvv "     --header \"Authorization: Bearer \$ZDESK_token\"" >&2
      echovvv "     $*" >&2

      resp="$(curl $curl_silent -w '\nhttp_code: %{http_code}\n' \
                   --header "Content-Type: application/vnd.api+json" \
                   --header "Authorization: Bearer $token" \
                   $@)"
      ;;
  esac

  resp_body="$(printf '%s' "$resp" | awk '!/^http_code/; /^http_code/{next}')"
  resp_code="$(printf '%s' "$resp" | awk '!/^http_code/{next} /^http_code/{print $2}')"

  echodebug "API request http code: $resp_code. Response:"
  echodebug_raw "$resp_body"

  case "$resp_code" in
    2*)
      printf "%s" "$resp_body"

      next_page="$(printf "%s" "$resp_body" | \
                   jq -r '.meta.pagination."next-page"' 2>&3)"

      if [ -n "$next_page" ] && [ "$next_page" != null ] &&
         ! [ "$npages" -le 1 ]; then
        echodebug "next page: $next_page"
        echodebug "npages: $npages"
        next_link="$(printf "%s" "$resp_body" | jq -r '.links.next')"
        echodebug "next link: $next_link"
        zdesk_api_call $((--npages)) "$next_link"
      fi
      ;;
    4*|5*)
      echoerr "API request failed."
      echoerr_raw "HTTP status code: $resp_code"
      if jsonapi_err="$(echo "$resp_body" | jq -r '
        def leaf_print(o):
          o.indent as $i |
          $i + "  " as $ni |
          o.errors as $e |
          $e | keys[] as $k |
            (select(($e[$k] | type) != "array" and ($e[$k] | type) != "object") |
              "\($k): \($e[$k])"),
            (select(($e[$k] | type) == "object") |
              "\($k):",
              "\(leaf_print({"errors": $e[$k], "indent": $ni}))"),
            (select(($e[$k] | type) == "array") |
              "\($k):",
              "\(leaf_print({"errors": $e[$k], "indent": $ni}))");

        leaf_print({"errors": .errors[], "indent": "  "})')"; then
        echoerr_raw "JSON-API details:"
        echoerr_raw "$jsonapi_err"
      else
        echoerr "Response:"
        echoerr_raw "$resp_body"
      fi

      return 1
      ;;
    *)
      echoerr "Unable to complete API request."
      echoerr "HTTP status code: $resp_code."
      echoerr "Response:"
      echoerr "$resp_body"
      return 1
      ;;
  esac
}

check_required () {
  if [ 0 -eq $# ]; then
    check_for="org ws token address"
  else
    check_for="$*"
  fi

  missing=0
  for i in $check_for; do
    case "$i" in
      org)
        if [ -z "$org" ]; then
          missing=1
          echoerr 'TFE organization required.'
          echoerr 'Set with $ZDESK_org or use -org'
          echoerr
        fi
      ;;
      ws)
        if [ -z "$ws" ]; then
          missing=1
          echoerr 'TFE workspace name required.'
          echoerr 'Set with $ZDESK_name or use -name, and optionally -prefix'
          echoerr
        fi
      ;;
      token)
        if [ "$curl_token_src" = none ]; then
          missing=1
          echoerr 'TFE API token required.'
          echoerr 'Set with `zdesk curl-config`,  $ZDESK_token, or -token'
          echoerr
        fi
      ;;
      address)
        # This really shouldn't happen. Someone would have to
        # explicitly pass in an empty string to the command line
        # argument.
        if [ -z "$address" ]; then
          missing=1
          echoerr 'TFE hostname required.'
          echoerr 'Set with -hostname or $ZDESK_hostname'
          echoerr
        fi
      ;;
    esac
  done
  return $missing
}

zdesk_junonia_filter () {
  readonly ZDESK_DEFAULT_CURLRC="$JUNONIA_CONFIGDIR/curlrc"

  readonly hostname="$1"
  readonly token="$2"
  readonly curlrc="${3:-"$ZDESK_DEFAULT_CURLRC"}"
  readonly complete_response="$4"
  readonly get_all_pages="$5"
  readonly mime_type="$6"
  readonly retry_on="$7"
  readonly max_retries="$8"
  readonly raw_query="$9"
  readonly retval="${10}"
  readonly include="${11}"
  readonly page="${12}"
  readonly per_page="${13}"
  readonly sort_by="${14}"
  readonly sort_order="${15}"

  # Waterfall verbosity levels down
  readonly vvverbose="${16}"
  readonly vverbose="${17:-$vvverbose}"
  readonly verbose="${18:-$vverbose}"

  readonly address="https://$hostname.zendesk.com"

  echov "address:           $address"
  echov "hostname:          $hostname"
  #echov "token:             $token"
  echov "curlrc:            $curlrc"
  echov "complete_response: $complete_response"
  echov "get_all_pages:     $get_all_pages"
  echov "mime_type:         $mime_type"
  echov "retry_on:          $retry_on"
  echov "max_retries:       $max_retries"
  echov "raw_query:         $raw_query"
  echov "retval:            $retval"
  echov "include:           $include"
  echov "page:              $page"
  echov "per_page:          $per_page"
  echov "sort_by:           $sort_by"
  echov "sort_order:        $sort_order"
  echov "verbose:           $verbose"
  echov "vverbose:          $vverbose"
  echov "vvverbose:         $vvverbose"

  curl_token_src=

  # curlrc argument at the command line takes highest precedence
  if echo "$ZDESK_CMDLINE" | grep -qE -- '-curlrc'; then
    echodebug "explicit -curlrc"
    if [ -f "$curlrc" ]; then
      curl_token_src=curlrc
    else
      curl_token_src=curlrc_not_found
    fi
  fi

  # token at the command line takes second highest precedence
  if [ -z "$curl_token_src" ] && [ -n "$token" ] &&
     echo "$ZDESK_CMDLINE" | grep -qE -- '-token'; then
    echodebug "explicit -token"
    curl_token_src=token
  fi

  # curlrc from any source (default included) comes third
  if [ -z "$curl_token_src" ] && [ -f "$curlrc" ]; then
    echodebug "curlrc from env and config file"
    curl_token_src=curlrc
  fi

  # token from the config file or environment var comes last
  if [ -z "$curl_token_src" ] && [ -n "$token" ]; then
    echodebug "token from env and config file"
    curl_token_src=token
  fi

  if [ -z "$curl_token_src" ]; then
    curl_token_src=none
  fi

  if [ -z "$token" ]; then
    token_status="empty"
  else
    token_status="not empty"
  fi

  case $curl_token_src in
    curlrc)
      echov "token:     $token_status, unused"
      echov "curlrc:    $curlrc"
      ;;
    token)
      echov "token:     $token_status"
      echov "curlrc:    $curlrc, unused"
      ;;
    curlrc_not_found)
      echov "token:     $token_status, unused"
      echov "curlrc:    $curlrc specified but not found"
      ;;
    none)
      echov "token:     empty"
      echov "curlrc:    $curlrc not found"
      ;;
  esac

  return 18
}

# This is a compact version of junonia_bootstrap for easy copyhing into user
# scripts. For a fully commented, documented version of this script see
# https://github.com/fprimex/junonia/blob/master/junonia.sh
junonia_bootstrap () {
  JUNONIA_TARGET="$0"
  while [ -h "$JUNONIA_TARGET" ]; do
    JUNONIA_PATH=$(readlink "$JUNONIA_TARGET")
    if [ "$(echo "$JUNONIA_PATH" | cut -c -1)" = "/" ]; then
    JUNONIA_TARGET="$JUNONIA_PATH"
    else
    JUNONIA_TARGET="$(dirname $JUNONIA_TARGET)"
    JUNONIA_TARGET="$JUNONIA_TARGET/$JUNONIA_PATH"
    fi
  done
  JUNONIA_PATH="$(cd "$(dirname "$JUNONIA_TARGET")" && pwd -P)"
  JUNONIA_TARGET="$JUNONIA_PATH/$(basename $JUNONIA_TARGET)"
  if [ "$(basename "$JUNONIA_PATH")" = bin ]; then
    JUNONIA_PATH="$(dirname "$JUNONIA_PATH")"
  fi
}

# Top level invocation of the command.
zdesk () {
  $0 help
  exit 1
}

zdesk_version () {
  echo "0.0.1dev"
}

##
## Program begins here
##

# JUNONIA_DEBUG      # Turn on debugging of the junonia library
# JUNONIA_CONFIG     # Path to script rc file
# JUNONIA_CONFIGDIR  # Path to config directory
# JUNONIA_CACHEDIR   # Path to cache directory
# JUNONIA_CACHE      # Flag to optionally disable (0) caching
# JUNONIA_WRAP       # Width of two column output (option help listings)
# JUNONIA_COL1       # Width of column one
# JUNONIA_COL2       # Width of column two
# TMPDIR             # Temporary directory

# Save the whole command line
readonly ZDESK_CMDLINE="$0 $*"

if [ -n "$ZDESK_LOG" ]; then
  # Debugging. Print command errors and make them verbose
  tar_verbose=v
  curl_silent=
  export JUNONIA_DEBUG=1
  export ZDESK_vvverbose=1
  exec 3>&2
else
  # Not debugging. Shut everyting up.
  tar_verbose=
  curl_silent="-s"
  exec 3>/dev/null
fi

junonia_bootstrap

JUNONIA_COL1=28
JUNONIA_COL2=50

. "$JUNONIA_PATH"/lib/junonia

echodebug "$PWD"
echodebug "$0 $*"

junonia_run "$@"

echo "method: $method"
echo "url:    $url"
echo "query:  $query"

#curl -u "$token" \
#     -X "$method" \
#     "$address$url"
